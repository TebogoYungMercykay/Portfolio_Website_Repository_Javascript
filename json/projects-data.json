[
    {
        "title": "A TODO App",
        "subtitle": "(AWS Lambda and Serverless Framework)",
        "image": "./images/edits/AWS_Todo_Edit.png",
        "description": "<strong> Description </strong> This application will allow users to create/remove/update/get TODO items. Each user only has access to the TODO items they made.",
        "clientSide": "<strong> Frontend: </strong> React and Bootstrap.",
        "serverSide": "<strong> Backend: </strong> Serverless.yml, Node.js, API gateway, S3 Bucket, IAM, DynamoDB, AWS Lambda, XRAY, Serverless-API, Auth.",
        "githubLink": "https://github.com/TebogoYungMercykay/Serverless_TODO_App_using_Aws_Lambda"
    },
    {
        "title": "Image Filter",
        "subtitle": "(Udagram Image Filtering Microservice)",
        "image": "./images/edits/Cat.png",
        "description": "<strong> Description </strong> Udagram is a simple cloud application developed alongside the Udacity Cloud Engineering Nanodegree. It allows users to register and log into a web client, post photos to the feed, and process photos using an image filtering microservice.",
        "concepts": "<strong> Technologies: </strong> This Node-Express application runs a script to process images.",
        "githubLink": "https://github.com/TebogoYungMercykay/Udagram_Image_Filtering_Microservice"
    },
    {
        "title": "Wackdonalds Restaurant",
        "subtitle": "(Simulator Software Group Project in C++)",
        "image": "./images/edits/wackdonalds.jpg",
        "description": "<strong> Description </strong>  This is a Design and Implementation for a Restaurant Simulation Software, where we Modelled the intricate processes of Running a Restaurant",
        "concepts": "<strong> Technologies: </strong> OOP, Design Patterns, UML (Class, State, Communication, Sequence, Activity & Object Diagrams), Dev Ops (Linter, Unit Testing (Google Test), CI/CD (Docker and CircleCI)), GitHub Jobs, Coding Standards, Doxygen.",
        "githubLink": "https://github.com/TebogoYungMercykay/Restaurant_Simulator_COS214_Group_Project.git"
    },
    {
        "title": "Python FastAPI",
        "subtitle": "(Robust and Efficient API)",
        "image": "./images/edits/fastapi.png",
        "description": "<strong> Description </strong> A comprehensive repository showcasing modern best practices and examples for building robust, high-performance and efficient API using FastAPI in Python.",
        "concepts": "<strong> Technologies: </strong> Unit Testing, CI/CD (Docker, Heroku), Database Migration Tools, Authentication (JWT Tokens), Virtual Env, Relational Databases (Postgres), Uvicorn ASGI Web Server, GitHub Jobs, SQLAlchemy.",
        "githubLink": "https://github.com/TebogoYungMercykay/Python_API_Development_Booth_FASTAPI.git",
        "liveViewLink": "https://healthconnect-python-fastapi-9b23b53a9ae4.herokuapp.com/docs"
    },
    {
        "title": "Cloud Application",
        "subtitle": "(Refactoring a Monolith to Microservices)",
        "image": "./images/edits/Microservices.png",
        "description": "<strong> Description </strong> This udagram is a simple cloud application developed alongside the Udacity Cloud Engineering Nanodegree. It allows users to register and log into a web client, post photos to the feed, and process photos using an image filtering microservice.",
        "clientSide": "<strong> Frontend: </strong> Angular and Ionic.",
        "serverSide": "<strong> Backend: </strong> Node.js, Express.js, TypeScript, RDS Database (POSTGRESS), Amazon S3",
        "concepts": "<strong> Technologies: </strong> Reverse Proxy, nginx.conf, Docker, Containerization, Kubernetes Clusters, Microservices, HorizontalPodAutoscaler.",
        "githubLink": "https://github.com/TebogoYungMercykay/Refactoring_a_Monolith_to_Microservices"
    },
    {
        "title": "Multithreaded CRUD API",
        "subtitle": "(Concurrent Systems in Java)",
        "image": "./images/edits/CRUD.png",
        "description": "<strong> Description </strong> This API is a multi-threaded CRUD (Create, Read, Update, Delete) API for handling database requests. It utilizes multi-threading and the Bakery Lock algorithm to ensure thread safety and concurrent operations on a shared database.",
        "concepts": "<strong> Concepts: </strong> Java, Multi-threading, Locking, Fairness, Concurrency, CRUD Operations, Bakery Lock, Queues, Threads, Makefile, WSL, Linked Lists, Database Development, Requests.",
        "githubLink": "https://github.com/TebogoYungMercykay/Concurrent_Multithreaded_CRUD_API"
    },
    {
        "title": "The Brand Race",
        "subtitle": "(Local NodeJs Socket Server)",
        "image": "./images/edits/NodeJS_Edit.png",
        "description": "<strong> Description </strong> This game is played in real-time by users per 1 vs 1 per Game Loop. The general idea of the game is to guess the logo of a car brand quicker than an opponent.",
        "clientSide": "<strong> Frontend: </strong> Javascript, HTML, and CSS.",
        "serverSide": "<strong> Backend: </strong> Node.js, Socket.io, Express.js, PHP API, and MySQL Database.",
        "githubLink": "https://github.com/TebogoYungMercykay/Brand_Race-Local_NodeJS_Socket_Server"
    },
    {
        "title": "DFA Simulator Engine",
        "subtitle": "(Group Project in Assembly & C)",
        "image": "./images/edits/dfa.png",
        "description": "<strong> Description </strong> This program would allow lecturers to define a DFA in a text file, which the program could then construct and simulate with input strings using NASM Assembler and C language.",
        "concepts": "<strong> Concepts: </strong> Deterministic Finite Automata, x86-64 Bit NASM Assembler, Constructing DFA, Simulation of Input Strings, Checking if Two DFAs Accept the Same Language.",
        "githubLink": "https://github.com/TebogoYungMercykay/TeamName_COS284_Group_Project_1.git"
    },
    {
        "title": "Jerman Otto",
        "subtitle": "(Car Site: PHP, API, JavaScript and MySQL)",
        "image": "./images/edits/Jerman_Otto_Edit.jpg",
        "description": "<strong> Description </strong> Jerman Otto is a site to view and compare different cars and brands. The idea is for you to look at other cars and see the specs to choose which car to buy. You can view car models, compare cars, and even use the Find Me a Car feature.",
        "clientSide": "<strong> Frontend: </strong> HTML and CSS, Javascript, AJAX and JQuery.",
        "serverSide": "<strong> Backend: </strong> PHP, RESTful API, JSON, and MySQL Database.",
        "githubLink": "https://github.com/TebogoYungMercykay/The_Jerman_Otto_Car_Site",
        "liveViewLink": "https://jerman-otto-car-site.netlify.app"
    },
    {
        "title": "Relational Databases",
        "subtitle": "(Data Structures and Algorithms in Java)",
        "image": "./images/edits/relational-databases.png",
        "description": "<strong> Description </strong> This project puts a twist on the Standard Treap (randomized search tree) in that I add the idea of self-organizing data structures to implement a Database (collection of somehow related rows) Indexing.",
        "concepts": "<strong> Concepts: </strong> Treap, Binary Trees, Self-organizing, Max Heap, CRUD Operations, Exceptions, and Indexing.",
        "githubLink": "https://github.com/TebogoYungMercykay/Relational-Database_Using_Self-organizing_Treaps"
    },
    {
        "title": "Towers Of Hanoi",
        "subtitle": "(C++: Object-Oriented Programming)",
        "image": "./images/edits/CPP_Edit.png",
        "description": "<strong> Description </strong> I implemented a Solver for this popular puzzle game that consists of two main components: three towers and n number of disks. The goal is to move the tower of disks from one tower to another, only moving a single disk at a time.",
        "concepts": "<strong> Concepts: </strong> Recursion, Pointers, Classes and Objects, Templates, Abstract Classes And STL Stacks, Exceptions, Inheritance, Friends of classes.",
        "githubLink": "https://github.com/TebogoYungMercykay/Towers_Of_Hanoi_Puzzle_Solver"
    },
    {
        "title": "Mathematical Modelling",
        "subtitle": "(Python 3, Jupyter Notebook)",
        "image": "./images/languages/Python.jpg",
        "description": "<strong> Description </strong> This repository contains a collection of Python scripts to aid in mathematical computations and analysis. The repository is a booth where I solve mathematical problems, conduct numerical computations, and explore mathematical concepts.",
        "concepts": "<strong> Concepts: </strong> Numpy, Recursion, Differential equations, Sympy, Linearization, Growth Factor, Mathplotlib, Polyfit, Riemann-Sums, Lambda expressions, Logistic Difference equations, Counter and Clock.",
        "githubLink": "https://github.com/TebogoYungMercykay/Mathematical_Modelling_In_Python"
    }
]
