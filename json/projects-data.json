[
    {
        "title": "The Republic",
        "subtitle": "(COS301: Final Year Project)",
        "image": "./images/edits/the-republic.png",
        "description": "<strong> Description </strong> TImagine a fusion of 'Eskom se Push' and 'X'. The Republic allows users to raise concerns and spread awareness about government services through incident reports, with cool data visualizations providing a dynamic overview of public sentiment on service delivery.",
        "clientSide": "<strong> Frontend: </strong> Next Js, Radix UI, Typescript, Jest, ECharts.",
        "serverSide": "<strong> Backend: </strong> Node.js, Typescript, Express.js, Flask, NGINX, Supabase, Docker, Jest, WebPack, ESLint.",
        "githubLink": "https://github.com/COS301-SE-2024/The-Republic",
        "liveViewLink": "https://www.the-republic.co.za/about"
    },
    {
        "title": "Compiler Construction",
        "subtitle": "(Python: Rec Programming Lang)",
        "image": "./images/edits/compiler.jpg",
        "description": "<strong> Description </strong> This repository contains the core components of the Recursive Student Programming Language Compiler Construction and Design project. The project aims to implement a complete compiler from scratch, including lexical analysis, parsing, semantic analysis, and target code generation.",
        "concepts": "<strong> Concepts: </strong> Recursion, Scopes, Lexer, Parser, Testing, PyTest, Scope Analyzer, Type Checker, Code Generator, Virtual Environment, Pip, User Manual, Netwide Assembler.",
        "githubLink": "https://github.com/TebogoYungMercykay/RecSPL-Compiler-Construction-In-Python"
    },
    {
        "title": "Python FastAPI",
        "subtitle": "(Python: Robust & Efficient API)",
        "image": "./images/edits/fastapi.png",
        "description": "<strong> Description </strong> A comprehensive repository showcasing modern best practices and examples for building robust, high-performance and efficient API using FastAPI in Python.",
        "concepts": "<strong> Technologies: </strong> Unit Testing, CI/CD (Docker, Heroku), Database Migration Tools, Authentication (JWT Tokens), Virtual Env, Relational Databases (Postgres), Uvicorn ASGI Web Server, GitHub Jobs, SQLAlchemy.",
        "githubLink": "https://github.com/TebogoYungMercykay/Python_API_Development_Booth_FASTAPI.git",
        "liveViewLink": "https://healthconnect-python-fastapi-9b23b53a9ae4.herokuapp.com/docs"
    },
    {
        "title": "Concurrent Testing Framework",
        "subtitle": "(Java: JUnit Runner, Gradle)",
        "image": "./images/edits/java-testing.jpeg",
        "description": "<strong> Description </strong> This project demonstrates the use of a custom multi-threaded testing framework to compare the performance of sequential and concurrent test execution. The framework uses custom annotations to specify the execution mode and order of tests.",
        "concepts": "<strong> Concepts: </strong> Apache Commons Math, Google Guava, Kotlin DSL, Assertions, Annotations (Test, Order, RunMode, Execution Mode (Concurrent, Sequential)), ThreadPool, Maven Central, Logging, Error Streams, Stack Tracing.",
        "githubLink": "https://github.com/TebogoYungMercykay/Concurrent-Testing-Framework"
    },
    {
        "title": "Image Filter",
        "subtitle": "(Node JS: Udagram Image Filtering Microservice)",
        "image": "./images/edits/Cat.png",
        "description": "<strong> Description </strong> Udagram is a simple cloud application developed alongside the Udacity Cloud Engineering Nanodegree. It allows users to register and log into a web client, post photos to the feed, and process photos using an image filtering microservice.",
        "concepts": "<strong> Technologies: </strong> This Node-Express application runs a script to process images.",
        "githubLink": "https://github.com/TebogoYungMercykay/Udagram_Image_Filtering_Microservice"
    },
    {
        "title": "Cloud Application",
        "subtitle": "(Refactoring a Monolith to Microservices)",
        "image": "./images/edits/Microservices.png",
        "description": "<strong> Description </strong> This udagram is a simple cloud application developed alongside the Udacity Cloud Engineering Nanodegree. It allows users to register and log into a web client, post photos to the feed, and process photos using an image filtering microservice.",
        "clientSide": "<strong> Frontend: </strong> Angular and Ionic.",
        "serverSide": "<strong> Backend: </strong> Node.js, Express.js, TypeScript, RDS Database (POSTGRESS), Amazon S3",
        "concepts": "<strong> Technologies: </strong> Reverse Proxy, nginx.conf, Docker, Containerization, Kubernetes Clusters, Microservices, HorizontalPodAutoscaler.",
        "githubLink": "https://github.com/TebogoYungMercykay/Refactoring_a_Monolith_to_Microservices"
    },
    {
        "title": "A TODO App",
        "subtitle": "(AWS Lambda and Serverless Framework)",
        "image": "./images/edits/AWS_Todo_Edit.png",
        "description": "<strong> Description </strong> This application will allow users to create/remove/update/get TODO items. Each user only has access to the TODO items they made.",
        "clientSide": "<strong> Frontend: </strong> React and Bootstrap.",
        "serverSide": "<strong> Backend: </strong> Serverless.yml, Node.js, API gateway, S3 Bucket, IAM, DynamoDB, AWS Lambda, XRAY, Serverless-API, Auth.",
        "githubLink": "https://github.com/TebogoYungMercykay/Serverless_TODO_App_using_Aws_Lambda"
    },
    {
        "title": "Wackdonalds Restaurant",
        "subtitle": "(C++: Simulator Software Group Project)",
        "image": "./images/edits/wackdonalds.jpg",
        "description": "<strong> Description </strong>  This is a Design and Implementation for a Restaurant Simulation Software, where we Modelled the intricate processes of Running a Restaurant",
        "concepts": "<strong> Technologies: </strong> OOP, Design Patterns, UML (Class, State, Communication, Sequence, Activity & Object Diagrams), Dev Ops (Linter, Unit Testing (Google Test), CI/CD (Docker and CircleCI)), GitHub Jobs, Coding Standards, Doxygen.",
        "githubLink": "https://github.com/TebogoYungMercykay/Restaurant_Simulator_COS214_Group_Project.git"
    },
    {
        "title": "The Brand Race",
        "subtitle": "(Node JS: Local Socket Server)",
        "image": "./images/edits/NodeJS_Edit.png",
        "description": "<strong> Description </strong> This game is played in real-time by users per 1 vs 1 per Game Loop. The general idea of the game is to guess the logo of a car brand quicker than an opponent.",
        "clientSide": "<strong> Frontend: </strong> Javascript, HTML, and CSS.",
        "serverSide": "<strong> Backend: </strong> Node.js, Socket.io, Express.js, PHP API, and MySQL Database.",
        "githubLink": "https://github.com/TebogoYungMercykay/Brand_Race-Local_NodeJS_Socket_Server"
    },
    {
        "title": "Multithreaded CRUD API",
        "subtitle": "(Java: Concurrent Systems)",
        "image": "./images/edits/CRUD.png",
        "description": "<strong> Description </strong> This API is a multi-threaded CRUD (Create, Read, Update, Delete) API for handling database requests. It utilizes multi-threading and the Bakery Lock algorithm to ensure thread safety and concurrent operations on a shared database.",
        "concepts": "<strong> Concepts: </strong> Java, Multi-threading, Locking, Fairness, Concurrency, CRUD Operations, Bakery Lock, Queues, Threads, Makefile, WSL, Linked Lists, Database Development, Requests.",
        "githubLink": "https://github.com/TebogoYungMercykay/Concurrent_Multithreaded_CRUD_API"
    },
    {
        "title": "DFA Simulator Engine",
        "subtitle": "(Assembly & C: Group Project)",
        "image": "./images/edits/dfa.png",
        "description": "<strong> Description </strong> This program would allow lecturers to define a DFA in a text file, which the program could then construct and simulate with input strings using NASM Assembler and C language.",
        "concepts": "<strong> Concepts: </strong> Deterministic Finite Automata, x86-64 Bit NASM Assembler, Constructing DFA, Simulation of Input Strings, Checking if Two DFAs Accept the Same Language.",
        "githubLink": "https://github.com/TebogoYungMercykay/TeamName_COS284_Group_Project_1.git"
    },
    {
        "title": "Relational Databases",
        "subtitle": "(Java: Data Structures and Algorithms)",
        "image": "./images/edits/relational-databases.png",
        "description": "<strong> Description </strong> This project puts a twist on the Standard Treap (randomized search tree) in that I add the idea of self-organizing data structures to implement a Database (collection of somehow related rows) Indexing.",
        "concepts": "<strong> Concepts: </strong> Treap, Binary Trees, Self-organizing, Max Heap, CRUD Operations, Exceptions, and Indexing.",
        "githubLink": "https://github.com/TebogoYungMercykay/Relational-Database_Using_Self-organizing_Treaps"
    }
]
