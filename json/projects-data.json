[
    {
        "title": "Maximum Notion Security Services",
        "subtitle": "(Full-Stack Web Development & DevOps)",
        "image": "./images/edits/favicon.svg",
        "description": "<strong> Description </strong> Complete website transformation for South Africa's leading security services provider. Migrated from WordPress template to custom Next.js implementation, delivering enhanced performance, SEO optimization, and comprehensive analytics integration with zero-downtime hosting migration.",
        "clientSide": "<strong> Frontend: </strong> Next.js, TypeScript, Tailwind CSS, Responsive Design",
        "serverSide": "<strong> Backend & DevOps: </strong> DNS Zone Management, Hosting Migration, Google Analytics Integration.",
        "liveLink": "https://www.maximumnotion.co.za"
    },
    {
        "title": "The Republic",
        "subtitle": "(COS301: Final Year Project)",
        "image": "./images/edits/the-republic.png",
        "description": "<strong> Description </strong> Imagine a fusion of 'Eskom se Push' and 'X'. The Republic allows users to raise concerns and spread awareness about government services through incident reports, with cool data visualizations providing a dynamic overview of public sentiment on service delivery.",
        "clientSide": "<strong> Frontend: </strong> Next Js, Radix UI, Typescript, Jest, ECharts.",
        "serverSide": "<strong> Backend: </strong> Node.js, Typescript, Express.js, Flask, NGINX, Supabase, Docker, Jest, WebPack, ESLint.",
        "githubLink": "https://github.com/COS301-SE-2024/The-Republic"
    },
    {
        "title": "Compiler Construction",
        "subtitle": "(Python: Rec Programming Lang)",
        "image": "./images/edits/compiler.jpg",
        "description": "<strong> Description </strong> This repository contains the core components of the Recursive Student Programming Language Compiler Construction and Design project. The project aims to implement a complete compiler from scratch, including lexical analysis, parsing, semantic analysis, and target code generation.",
        "concepts": "<strong> Topics: </strong> Recursion, Scopes, Lexer, Parser, Testing, PyTest, Scope Analyzer, Type Checker, Code Generator, Virtual Environment, Pip, User Manual, Netwide Assembler.",
        "githubLink": "https://github.com/TebogoYungMercykay/RecSPL-Compiler-Construction-In-Python"
    },
        {
        "title": "Python FastAPI",
        "subtitle": "(Python: Robust & Efficient API)",
        "image": "./images/edits/fastapi.png",
        "description": "<strong> Description </strong> A comprehensive repository showcasing modern best practices and examples for building robust, high-performance and efficient API using FastAPI in Python. The project includes a fully deployed API with interactive documentation, demonstrating real-world implementation of authentication, database management, and containerized deployment.",
        "concepts": "<strong> Technologies: </strong> Unit Testing, CI/CD (Docker, Heroku), Database Migration Tools, Authentication (JWT Tokens), Virtual Env, Relational Databases (Postgres), Uvicorn ASGI Web Server, GitHub Jobs, SQLAlchemy.",
        "githubLink": "https://github.com/TebogoYungMercykay/FastAPI-Backend-ML-Service"
    },
    {
        "title": "Serverless Framework",
        "subtitle": "(AWS Cloud Architecture & DevOps)",
        "image": "./images/edits/serverless.png",
        "description": "<strong> Description </strong> A Full-Stack Serverless TODO application built with AWS Lambda, API Gateway, DynamoDB, and React. Features secure authentication through Auth0 and demonstrates modern serverless architecture patterns. Enables users to manage personal tasks with CRUD operations, ensuring data isolation and supporting optional image attachments for each task.",
        "concepts": "<strong> Topics: </strong> AWS Lambda Functions, API Gateway REST API, DynamoDB NoSQL Database, S3 File Storage, Serverless Framework Infrastructure as Code, Auth0 Authentication, Custom Lambda Authorizers, IAM Security Models, Event-Driven Architecture, Node.js Runtime.",
        "githubLink": "https://github.com/TebogoYungMercykay/AWS-Serverless-Task-Manager-App"
    },
    {
        "title": "Cloud Application",
        "subtitle": "(AWS, Kubernetes Clusters, NGINX & Docker)",
        "image": "./images/edits/AWS.jpg",
        "description": "<strong> Description </strong> This cloud application allows users to register and log into a web client, post photos to the feed, and process photos using an image filtering microservice. It is built using a microservices architecture.",
        "clientSide": "<strong> Frontend: </strong> Angular and Ionic.",
        "serverSide": "<strong> Backend: </strong> Node.js, Express.js, TypeScript, RDS Database (POSTGRESS), Amazon S3",
        "concepts": "<strong> Technologies: </strong> Reverse Proxy, nginx.conf, Docker, Containerization, Kubernetes Clusters, Microservices, HorizontalPodAutoscaler.",
        "githubLink": "https://github.com/TebogoYungMercykay/Udagram-Image-Social-Microservices"
    },
    {
        "title": "Image Filter",
        "subtitle": "(AWS, Udagram Image Filtering Microservice)",
        "image": "./images/edits/Cat.png",
        "description": "<strong> Description </strong> This project delivers a robust Node.js API and server for cloud-based image processing. Users can seamlessly upload images and apply a variety of advanced filters via RESTful endpoints. The service is designed for scalability, reliability, and efficient image transformation, providing an automated solution for image filtering workflows.",
        "concepts": "<strong> Technologies: </strong> AWS Cloud, AWS Elastic Beanstalk, IAM User, SSH, RestAPI, Node JS, AWS Cloud, Node-Express Scripts.",
        "githubLink": "https://github.com/TebogoYungMercykay/Udagram_Image_Filtering_Microservice"
    },
    {
        "title": "Concurrent Testing Framework",
        "subtitle": "(Java: JUnit Runner, Gradle)",
        "image": "./images/edits/java-testing.jpeg",
        "description": "<strong> Description </strong> This project demonstrates the use of a custom multi-threaded testing framework to compare the performance of sequential and concurrent test execution. The framework uses custom annotations to specify the execution mode and order of tests.",
        "concepts": "<strong> Topics: </strong> Apache Commons Math, Google Guava, Kotlin DSL, Assertions, Annotations (Test, Order, RunMode, Execution Mode (Concurrent, Sequential)), ThreadPool, Maven Central, Logging, Error Streams, Stack Tracing.",
        "githubLink": "https://github.com/TebogoYungMercykay/Concurrent-Testing-Framework"
    },
    {
        "title": "Relational Databases",
        "subtitle": "(Java: Data Structures and Algorithms)",
        "image": "./images/edits/JavaDSA.jpg",
        "description": "<strong> Description </strong> This project puts a twist on the Standard Treap (randomized search tree) in that I add the idea of self-organizing data structures to implement a Database (collection of somehow related rows) Indexing.",
        "concepts": "<strong> Topics: </strong> Treap, Binary Trees, Self-organizing, Max Heap, CRUD Operations, Exceptions, and Indexing.",
        "githubLink": "https://github.com/TebogoYungMercykay/Relational-Database_Using_Self-organizing_Treaps"
    },
    {
        "title": "Computer Networking",
        "subtitle": "(C++ OOP: Network Protocols)",
        "image": "./images/edits/Networking.jpg",
        "description": "<strong> Description </strong> This is a comprehensive collection of network protocol implementations and server applications built from scratch to demonstrate core networking concepts and server-side programming.",
        "concepts": "<strong> Topics:  </strong> RFCs, Proxy, HTTP/1.1 with CGI support, FTP with active/passive modes, SMTP for email transmission, POP3 for email retrieval, LDAP for directory services, Telnet for remote terminal access </strong> .",
        "githubLink": "https://github.com/TebogoYungMercykay/Computer-Networking-In-CPP"
    },
    {
        "title": "Wackdonalds Restaurant",
        "subtitle": "(C++: Simulator Software Group Project)",
        "image": "./images/edits/wackdonalds.jpg",
        "description": "<strong> Description </strong> This project delivers a sophisticated restaurant simulation software, meticulously modeling the complex workflows and decision-making processes involved in running a modern restaurant. The solution is further enhanced by best DevOps practices, automated testing, and detailed documentation for high-quality software delivery.",
        "concepts": "<strong> Technologies: </strong> OOP, Design Patterns, UML (Class, State, Communication, Sequence, Activity & Object Diagrams), Dev Ops (Linter, Unit Testing (Google Test), CI/CD (Docker and CircleCI)), GitHub Jobs, Coding Standards, Doxygen.",
        "githubLink": "https://github.com/TebogoYungMercykay/Restaurant_Simulator_COS214_Group_Project.git"
    },
    {
        "title": "The Brand Race",
        "subtitle": "(Node JS: Local Socket Server)",
        "image": "./images/edits/Mario.png",
        "description": "<strong> Description </strong> The Brand Race is a real-time multiplayer game where players compete to identify car brand logos faster than their opponents. It features a low-latency socket server, live scoreboards, demonstrating real-time communication and engaging UI/UX.",
        "clientSide": "<strong> Frontend: </strong> Modern JavaScript (ES6+), HTML5, CSS3, with responsive design and real-time UI updates.",
        "serverSide": "<strong> Backend: </strong> Node.js, Socket.io for real-time communication, Express.js, PHP API integration, and MySQL Database for persistent, scalable data storage.",
        "githubLink": "https://github.com/TebogoYungMercykay/Brand_Race-Local_NodeJS_Socket_Server"
    }
]
